# -*- coding: utf-8 -*-
"""Roshni_Assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eoMkzcpn_iIsPEEH4sj1lNyZwyd8Ukbl

# **DOWNLOAD THE DATASET**
"""

DOWNLOAD THE DATASET

"""# **IMAGE AUGMENTATION**"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
batch_size = 32
img_height = 180
img_width = 180
data_dir = "/content/flowers"

train_datagen = ImageDataGenerator(rescale = 1./255, horizontal_flip = True, vertical_flip = True, zoom_range = 0.2)

x_train = train_datagen.flow_from_directory('/content/flowers',
                                                target_size=(64,64),
                                                class_mode='categorical',
                                                batch_size=100)

data_augmentation = Sequential(
  [
    layers.RandomFlip("vertical",input_shape=(img_height, img_width, 3)),
    layers.RandomRotation(0.1),
    layers.RandomZoom(0.1),
  ]
)

"""# **CREATE MODEL**"""

from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense
model = Sequential()

training_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=57,
  image_size=(img_height, img_width),
  batch_size=batch_size)

validation_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
seed=107,
  image_size=(img_height, img_width),
  batch_size=batch_size)

training_ds.class_names

plt.figure(figsize=(7, 7))
for data, labels in training_ds.take(1):
  for i in range(6):
    ax = plt.subplot(2, 3, i + 1)
    plt.imshow(data[i].numpy().astype("uint8"))
    plt.title(training_ds.class_names[labels[i]])
    plt.axis("off")

"""# 1.   Convoluation







"""

model.add(Convolution2D(32, (3,3), activation = "relu", input_shape = (64,64,3) ))

"""#2.   Maxpooling 


"""

model.add(MaxPooling2D(pool_size = (2,2)))

"""# 3.   Flatten



"""

model.add(Flatten())

"""# 4.   Hidden/dense


"""

model.add(Dense(300, activation = "relu"))
model.add(Dense(150, activation = "relu"))

"""# 5.Output """

model.add(Dense(5, activation = "softmax"))

"""# **COMPILE THE MODEL**"""

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

"""# **FIT THE MODEL**"""

model.fit(x_train, epochs = 15, steps_per_epoch = len(x_train))

"""# **SAVE THE MODEL**"""

model.save("flowers.h1")

"""# **TEST THE MODEL**"""

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model = load_model("/content/flowers.h1")

daisy_img = image.load_img('/content/flowers/daisy/100080576_f52e8ee070_n.jpg',target_size=(64,64))
x = image.img_to_array(daisy_img)
x = np.expand_dims(x,axis=0)
predicted_class=model.predict(x)

labels = ['daisy','dandelion','roses','sunflowers','tulips']
labels[np.argmax(predicted_class)]

daisy_img